diff --git a/node_modules/tamagui/dist/cjs/views/TextArea.native.js b/node_modules/tamagui/dist/cjs/views/TextArea.native.js
index 6c6ab8a..c550042 100644
--- a/node_modules/tamagui/dist/cjs/views/TextArea.native.js
+++ b/node_modules/tamagui/dist/cjs/views/TextArea.native.js
@@ -63,15 +63,15 @@ var TextAreaFrame = (0, import_core.styled)(import_Input.InputFrame, {
     _define_property({}, import_constants.isWeb ? "rows" : "numberOfLines", propsIn.unstyled ? void 0 : 4)
   );
   return (0, import_react.useEffect)(function() {
-    if (props.id && !props.disabled)
-      return (0, import_focusable.registerFocusable)(props.id, {
-        focusAndSelect: function() {
-          var _ref_current;
-          (_ref_current = ref.current) === null || _ref_current === void 0 || _ref_current.focus();
-        },
-        focus: function() {
-        }
-      });
+    // if (props.id && !props.disabled)
+    //   return (0, import_focusable.registerFocusable)(props.id, {
+    //     focusAndSelect: function() {
+    //       var _ref_current;
+    //       (_ref_current = ref.current) === null || _ref_current === void 0 || _ref_current.focus();
+    //     },
+    //     focus: function() {
+    //     }
+    //   });
   }, [
     props.id,
     props.disabled
diff --git a/node_modules/tamagui/src/views/TextArea.tsx b/node_modules/tamagui/src/views/TextArea.tsx
index ad106b1..28476c7 100644
--- a/node_modules/tamagui/src/views/TextArea.tsx
+++ b/node_modules/tamagui/src/views/TextArea.tsx
@@ -49,19 +49,19 @@ export const TextArea = TextAreaFrame.styleable<InputExtraProps>(
       [isWeb ? 'rows' : 'numberOfLines']: propsIn.unstyled ? undefined : 4,
     }
 
-    if (process.env.TAMAGUI_TARGET === 'native') {
-      useEffect(() => {
-        if (!props.id) return
-        if (props.disabled) return
+    // if (process.env.TAMAGUI_TARGET === 'native') {
+    //   useEffect(() => {
+    //     if (!props.id) return
+    //     if (props.disabled) return
 
-        return registerFocusable(props.id, {
-          focusAndSelect: () => {
-            ref.current?.focus()
-          },
-          focus: () => {},
-        })
-      }, [props.id, props.disabled])
-    }
+    //     return registerFocusable(props.id, {
+    //       focusAndSelect: () => {
+    //         ref.current?.focus()
+    //       },
+    //       focus: () => {},
+    //     })
+    //   }, [props.id, props.disabled])
+    // }
 
     return <TextAreaFrame {...linesProp} {...props} />
   }
